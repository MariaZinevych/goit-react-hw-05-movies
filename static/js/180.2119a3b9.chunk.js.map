{"version":3,"file":"static/js/180.2119a3b9.chunk.js","mappings":"+SAEMA,EAAU,mCAChBC,EAAAA,EAAAA,SAAAA,QAAyB,gCAElB,IAAMC,EAAa,mCAAG,oGACJD,EAAAA,EAAAA,IAAA,qCAAwCD,IADpC,cACrBG,EADqB,yBAEpBA,EAASC,KAAKC,SAFM,2CAAH,qDAKbC,EAAiB,mCAAG,WAAMC,GAAN,uFACRN,EAAAA,EAAAA,IAAA,gBACZM,EADY,oBACOP,EADP,oBADQ,cACzBG,EADyB,yBAIxBA,EAASC,MAJe,2CAAH,sDAOjBI,EAAW,mCAAG,WAAMD,GAAN,uFACFN,EAAAA,EAAAA,IAAA,gBACZM,EADY,4BACeP,EADf,oBADE,cACnBG,EADmB,yBAIlBA,EAASC,KAAKK,MAJI,2CAAH,sDAOXC,EAAY,mCAAG,WAAMH,GAAN,uFACHN,EAAAA,EAAAA,IAAA,gBACZM,EADY,4BACeP,EADf,2BADG,cACpBG,EADoB,yBAInBA,EAASC,KAAKC,SAJK,2CAAH,sDAMZM,EAAoB,mCAAG,WAAMC,GAAN,uFACXX,EAAAA,EAAAA,IAAA,+BACGD,EADH,4DAC8DY,IAFnD,cAC5BT,EAD4B,yBAI3BA,EAASC,KAAKC,SAJa,2CAAH,qD,2CClBjC,IAXmB,SAAC,GAAe,IAAbQ,EAAY,EAAZA,MACpB,OACE,wBACGA,EAAMC,KAAI,SAAAC,GAAI,OACb,yBACE,UAAC,KAAD,CAAMC,GAAE,kBAAaD,EAAKE,IAA1B,UAAgC,IAAEF,EAAKG,UADhCH,EAAKE,GADD,KAOpB,C,6HCgBD,EAzBa,SAAC,GAAsB,IAApBE,EAAmB,EAAnBA,aACd,GAA0BC,EAAAA,EAAAA,UAAS,IAAnC,eAAOC,EAAP,KAAcC,EAAd,KAWA,OACE,kBAAMC,SANa,SAAAC,GACnBA,EAAMC,iBACNN,EAAaE,EAAMK,cACpB,EAGC,WACE,kBACEC,KAAK,OACLC,KAAK,QACLC,WAAS,EACTC,MAAOT,EACPU,SAhBoB,SAAAP,GACxBF,EAASE,EAAMQ,OAAOF,MACvB,KAgBG,mBAAQH,KAAK,SAAb,SAAsB,aAG3B,ECYD,EAhCe,WACb,OAAsCP,EAAAA,EAAAA,UAAS,IAA/C,eAAOa,EAAP,KAAoBC,EAApB,KACA,GAA8Bd,EAAAA,EAAAA,WAAS,GAAvC,eAAOe,EAAP,KAAgBC,EAAhB,KACA,GAAwChB,EAAAA,EAAAA,WAAS,GAAjD,eAAOiB,EAAP,KAAqBC,EAArB,KAkBA,OACE,6BACE,SAAC,EAAD,CAAMnB,aAlBW,SAAAoB,GACnBH,GAAW,IAEXzB,EAAAA,EAAAA,IAAqB4B,GAClBC,MAAK,SAAAC,GACJP,EAAeO,GACfH,EAAyC,IAAzBG,EAAcC,OAC/B,IACAC,OAAM,SAAAC,GACLC,QAAQC,IAAIF,EACb,IACAG,SAAQ,WACPX,GAAW,EACZ,GACJ,IAKID,IAAW,SAAC,IAAD,IACXE,IACC,uBAAG,4DAEJJ,IAAe,SAACe,EAAA,EAAD,CAAYnC,MAAOoB,MAGxC,C","sources":["API.js","components/MoviesList.jsx","components/Form.jsx","page/Movies.jsx"],"sourcesContent":["import axios from 'axios';\n\nconst API_KEY = '7a1a96151b65b7a2369b7dfff5707ea0';\naxios.defaults.baseURL = 'https://api.themoviedb.org/3/';\n\nexport const fetchTrending = async () => {\n  const response = await axios.get(`trending/movie/day?api_key=${API_KEY}`);\n  return response.data.results;\n};\n\nexport const fetchMovieDetails = async movieId => {\n  const response = await axios.get(\n    `movie/${movieId}?api_key=${API_KEY}&language=en-US`\n  );\n  return response.data;\n};\n\nexport const fetchActors = async movieId => {\n  const response = await axios.get(\n    `movie/${movieId}/credits?api_key=${API_KEY}&language=en-US`\n  );\n  return response.data.cast;\n};\n\nexport const fetchReviews = async movieId => {\n  const response = await axios.get(\n    `movie/${movieId}/reviews?api_key=${API_KEY}&language=en-US&page=1`\n  );\n  return response.data.results;\n};\nexport const fetchSearchByKeyword = async keyword => {\n  const response = await axios.get(\n    `search/movie?api_key=${API_KEY}&language=en-US&page=1&include_adult=false&query=${keyword}`\n  );\n  return response.data.results;\n};\n","import { Link } from 'react-router-dom';\nconst MoviesList = ({ films }) => {\n  return (\n    <ul>\n      {films.map(film => (\n        <li key={film.id}>\n          <Link to={`/movies/${film.id}`}> {film.title}</Link>\n        </li>\n      ))}\n    </ul>\n  );\n};\nexport default MoviesList;\n","import { useState } from 'react';\n\nconst Form = ({ searchMovies }) => {\n  const [query, setQuery] = useState('');\n\n  const handleInputChange = event => {\n    setQuery(event.target.value);\n  };\n\n  const handleSubmit = event => {\n    event.preventDefault();\n    searchMovies(query.toLowerCase());\n  };\n\n  return (\n    <form onSubmit={handleSubmit}>\n      <input\n        type=\"text\"\n        name=\"query\"\n        autoFocus\n        value={query}\n        onChange={handleInputChange}\n      />\n      <button type=\"submit\">Search</button>\n    </form>\n  );\n};\nexport default Form;\n","import { fetchSearchByKeyword } from 'API';\nimport MoviesList from 'components/MoviesList';\nimport Loader from 'components/loader';\nimport { useState } from 'react';\nimport Form from 'components/Form';\n\nconst Movies = () => {\n  const [searchFilms, setSearchFilms] = useState([]);\n  const [loading, setLoading] = useState(false);\n  const [noMoviesText, setNoMoviesText] = useState(false);\n\n  const searchMovies = queryMovie => {\n    setLoading(true);\n\n    fetchSearchByKeyword(queryMovie)\n      .then(searchResults => {\n        setSearchFilms(searchResults);\n        setNoMoviesText(searchResults.length === 0);\n      })\n      .catch(error => {\n        console.log(error);\n      })\n      .finally(() => {\n        setLoading(false);\n      });\n  };\n\n  return (\n    <main>\n      <Form searchMovies={searchMovies} />\n      {loading && <Loader />}\n      {noMoviesText && (\n        <p>There is no movies with this request. Please, try again</p>\n      )}\n      {searchFilms && <MoviesList films={searchFilms} />}\n    </main>\n  );\n};\nexport default Movies;\n"],"names":["API_KEY","axios","fetchTrending","response","data","results","fetchMovieDetails","movieId","fetchActors","cast","fetchReviews","fetchSearchByKeyword","keyword","films","map","film","to","id","title","searchMovies","useState","query","setQuery","onSubmit","event","preventDefault","toLowerCase","type","name","autoFocus","value","onChange","target","searchFilms","setSearchFilms","loading","setLoading","noMoviesText","setNoMoviesText","queryMovie","then","searchResults","length","catch","error","console","log","finally","MoviesList"],"sourceRoot":""}